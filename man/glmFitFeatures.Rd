% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm.R
\name{glmFitFeatures,ANY,ANY,GenomicDataStream-method}
\alias{glmFitFeatures,ANY,ANY,GenomicDataStream-method}
\title{Fit series of generalized linear regression models}
\usage{
\S4method{glmFitFeatures}{ANY,ANY,GenomicDataStream}(
  y,
  design,
  data,
  family,
  weights,
  offset,
  detail = 1,
  doCoxReid = length(y) < 100,
  shareTheta = FALSE,
  fastApprox = FALSE,
  nthreads = 1,
  epsilon = 1e-08,
  maxit = 25,
  epsilon_nb = 1e-04,
  maxit_nb = 5,
  ...
)
}
\arguments{
\item{y}{response vector}

\item{design}{design matrix shared across all models}

\item{data}{\code{matrix} or \code{GenomicDataStream} with additional features to be fit one at a time}

\item{family}{a description of the error distribution and link function to be used in the modelm just like for \code{glm()}.  Also supports negative binomial as string \code{"nb:theta"}, see details below}

\item{weights}{vector of sample-level weights}

\item{offset}{vector of sample-level offset values}

\item{detail}{level of model detail returned, with LEAST = 0, LOW = 1, MEDIUM = 2, HIGH = 3, MOST = 4. LEAST (beta), LOW (beta, se, dispersion, rdf), MEDIUM (vcov), HIGH (pearson residuals), MOST (hatvalues)}

\item{doCoxReid}{use Cox-Reid adjustment when estimating overdispersion for negative binomial models.  Default TRUE for less than 100 samples}

\item{shareTheta}{estimate theta from design matrix, and share across all features instead of re-estimating for each feature}

\item{fastApprox}{default false.  if true, use pre-projection on the working response from an initial regression fit on only the design.  Under the null for data, this is a very good approximation and _much_ faster}

\item{nthreads}{number of threads.  Each model is fit in serial, analysis is parallelized across features}

\item{epsilon}{tolerance for GLM IRLS}

\item{maxit}{max iterations for GLM IRLS}

\item{epsilon_nb}{tolerance for negative binomial}

\item{maxit_nb}{max iterations for negative binomial}

\item{...}{other args}
}
\description{
Fit series of generalized linear regression models
}
\details{
Generalized linear models can be fit with \code{family} like in \code{glm()} using \code{gaussian()}, \code{poisson()}, \code{binomial()}, \code{binomial("probit")}, \code{quasibinomial()}, \code{quasipoisson()}, \code{negative.binomial(theta)}, \code{"nb"}, \code{"nb:theta"}. Or array of entries of form \code{"nb:theta"}, where \code{theta} is the parameter for the negative binomial distribution
}
\examples{
# create response, design and weights
y <- seq(60)
X_design <- matrix(1, 60, 1)
w <- rep(1, 60)

# VCF file
file <- system.file("extdata", "test.vcf.gz", package = "GenomicDataStream")

# Read data into R
# then run glmFitFeatures()
gds <- GenomicDataStream(file, "DS", initialize = TRUE)
dat <- getNextChunk(gds)
X_features <- dat$X

res1 <- glmFitFeatures(y, X_design, X_features, family="gaussian", w)

# Data stays at C++ level
# then run lmFitFeatures()
gds <- GenomicDataStream(file, "DS")

res2 <- glmFitFeatures(y, X_design, gds, family="gaussian", w)
}
