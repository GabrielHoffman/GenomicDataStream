% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glm.R
\name{glmFitFeatures,ANY,ANY,GenomicDataStream-method}
\alias{glmFitFeatures,ANY,ANY,GenomicDataStream-method}
\title{Fit series of generalized linear regression models}
\usage{
\S4method{glmFitFeatures}{ANY,ANY,GenomicDataStream}(
  y,
  design,
  data,
  family,
  weights,
  offset,
  detail = 1,
  doCoxReid = length(y) < 100,
  shareTheta = FALSE,
  nthreads = 1,
  ...
)
}
\arguments{
\item{y}{response vector}

\item{design}{design matrix shared across all models}

\item{data}{\code{matrix} or \code{GenomicDataStream} with additional features to be fit one at a time}

\item{family}{family type of GLM: "gaussian", "logit", "probit", "poisson", "nb:x" where x is a numeric value of theta}

\item{weights}{vector of sample-level weights}

\item{offset}{vector of sample-level offset values}

\item{detail}{level of model detail returned, with LEAST = 0, LOW = 1, MEDIUM = 2, HIGH = 3, MOST = 4. LEAST (beta), LOW (beta, se, sigSq, rdf), MEDIUM (vcov), HIGH (residuals), MOST (hatvalues)}

\item{doCoxReid}{use Cox-Reid adjustment when estimating overdispersion for negative binomial models.  Default TRUE for less than 100 samples}

\item{shareTheta}{estimate theta from design matrix, and share across all features instead of re-estimating for each feature}

\item{nthreads}{number of threads.  Each model is fit in serial, analysis is parallelized across features}

\item{...}{other args}
}
\description{
Fit series of generalized linear regression models
}
\examples{
# create response, design and weights
y <- seq(60)
X_design <- matrix(1, 60, 1)
w <- rep(1, 60)

# VCF file
file <- system.file("extdata", "test.vcf.gz", package = "GenomicDataStream")

# Read data into R
# then run glmFitFeatures()
gds <- GenomicDataStream(file, "DS", initialize = TRUE)
dat <- getNextChunk(gds)
X_features <- dat$X

res1 <- glmFitFeatures(y, X_design, X_features, family="gaussian", w)

# Data stays at C++ level
# then run lmFitFeatures()
gds <- GenomicDataStream(file, "DS")

res2 <- glmFitFeatures(y, X_design, gds, family="gaussian", w)
}
