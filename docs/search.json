[{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman G (2024). GenomicDataStream: Read genomic data files (VCF, BCF, BGEN, H5AD) R/Rcpp chunks. R package version 0.0.4, https://github.com/GabrielHoffman/GenomicDataStream.","code":"@Manual{,   title = {GenomicDataStream: Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks},   author = {Gabriel Hoffman},   year = {2024},   note = {R package version 0.0.4},   url = {https://github.com/GabrielHoffman/GenomicDataStream}, }"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"a-scalable-interface-between-data-and-analysis-underneath-r","dir":"","previous_headings":"GenomicDataStream","what":"A scalable interface between data and analysis underneath R","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"Reading genomic data files (VCF, BCF, BGEN, H5AD, DelayedArray) R/Rcpp chunks analysis Armadillo / Eigen / Rcpp libraries. Mondern datasets often big fit memory, many analyses operate small chunk features time. Yet practice, many implementations require whole dataset stored memory. Others pair analysis specific data format (.e. regresson analysis paired genotype data VCF) way two components can’t separated use applications. GenomicDataStream interface separate: data source streaming chunks features data matrix downstream analysis GenomicDataStream provides interfaces C++ R levels. C++ interface prioritizes efficiency, R interface wraps C++ backend non-technical users.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"example-code-with-c17","dir":"","previous_headings":"GenomicDataStream","what":"Example code with C++17","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"","code":"#include <RcppArmadillo.h> #include <GenomicDataStream.h>  // use namespace for GenomicDataStream using namespace gds;  // parameters  string file = \"test.vcf.gz\"; string field = \"DS\";    // read dosage field string region = \"\";     // no region filter string samples = \"-\";   // no samples filter int chunkSize = 4;      // each chunk will read 4 variants  // initialize parameters Param param(file, region, samples, chunkSize); param.setField( field );  // Initialise GenomicDataStream to read  // VCF/BCF and BGEN with same interface unique_ptr<GenomicDataStream> gdsStream = createFileView( param );  // declare DataChunk storing an Armadillo matrix for each chunk DataChunk<arma::mat> chunk;  // Store meta-data about each variant VariantInfo *info;  // loop through chunks while( gdsStream->getNextChunk( chunk ) ){      // get data from chunk     // chunk.getData();      // get variant information     info = chunk.getInfo<VariantInfo>();      // Do analysis with variants in this chunk }"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"read-genotype-data-into-r","dir":"","previous_headings":"GenomicDataStream > Example code with R","what":"Read genotype data into R","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"","code":"library(GenomicDataStream)  # VCF file file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  gds = GenomicDataStream(file, \"DS\", chunkSize=5, initialize=TRUE)  n = 60 y = rnorm(n) design = matrix(1, n, 1)  # loop until break while( 1 ){      # get data chunk     # data$X matrix with features as columns     # data$info information about each feature as rows     dat = getNextChunk(gds)      # check if end of stream      if( atEndOfStream(gds) ) break          # do analysis on this chunk of data     fit = lmFitFeatures(y, design, dat$X) }"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"use-r-to-run-analysis-at-c-level","dir":"","previous_headings":"GenomicDataStream > Example code with R","what":"Use R to run analysis at C++ level","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"","code":"library(GenomicDataStream)  # VCF file file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  gds = GenomicDataStream(file, \"DS\", chunkSize=5)  n = 60 y = rnorm(n) design = matrix(1, n, 1)  # regression of y ~ design + X[,j] #   where X[,j] is the jth variant in the GenomicDataStream fit = lmFitFeatures(y, design, gds)"},{"path":[]},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"single-cell-data","dir":"","previous_headings":"Supported formats","what":"Single cell data","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"Count matrices single cell data stored H5AD format. format, based HDF5, can store millions cells since designed sparse counts (.e. many entries 0) uses built-compression. H5AD enables file-backed random access analyzing subset data without reading entire file memory.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Read genomic data files (VCF, BCF, BGEN, H5AD) into R/Rcpp in chunks","text":"GenomicDataStream provide flexability terms data input types matrix libraries. can useful many cases, large number dependencies can require installation additional libraries increase compile times. dependencies can avoided removing support capabilities compiler flags Makevars: -D DISABLE_DELAYED_STREAM            Omit DelayedStream class, remove dependence Rcpp beachmat -D DISABLE_EIGEN            Omit support Eigen matrix library, remove dependence RcppEigen Eigen -D DISABLE_RCPP            Omit support Rcpp matrix library, remove dependence Rcpp GenomicDataStream written core functions C++17 dependence R Rcpp. top , thin wrapper uses Rcpp interface R lower-level library.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":null,"dir":"Reference","previous_headings":"","what":"GenomicDataStream — GenomicDataStream","title":"GenomicDataStream — GenomicDataStream","text":"Read genomic data files (VCF, BCF, BGEN, h5ad) R/Rcpp chunks analysis Armadillo Eigen libraries Interface GenomicDataStream C++ code","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GenomicDataStream — GenomicDataStream","text":"","code":"GenomicDataStream(   file,   field = \"\",   region = \"\",   samples = \"-\",   chunkSize = 1000,   missingToMean = FALSE,   initialize = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GenomicDataStream — GenomicDataStream","text":"file file VCF/BCF/BGEN/PGEN format index field field VCF/BCF read region target format chr2:1-12345. Multiple regions can separated one \",\\n\\t\", example \"chr2:1-12345, chr3:1000-8000\". Setting region \"\" includes variants samples string comma separated sample IDs extract: \"ID1,ID2,ID3\".  \"-\" indicates samples chunkSize number variants return per chunk missingToMean true, set missing values mean dosage value. false, set NaN initialize default FALSE.  TRUE, file info read path, otherwise store path GenomicDataStream initialized later","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GenomicDataStream — GenomicDataStream","text":"object class GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GenomicDataStream — GenomicDataStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  obj = GenomicDataStream(file, \"DS\", chunkSize=5, initialize = TRUE)  obj #> \t\t GenomicDataStream  #>  #>   file:          test.vcf.gz  #>   initialized:   TRUE  #>   stream type:   vcf.gz  #>   field:         DS  #>   region:          #>   samples:       60  #>   missingToMean: FALSE  #>   chunkSize:     5  #>   features read: 0  #>   end of stream: FALSE   # loop until break while( 1 ){    # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat = getNextChunk(obj)    if( atEndOfStream(obj) ) break        print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/atEndOfStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Detected if end of stream is reaached — atEndOfStream","title":"Detected if end of stream is reaached — atEndOfStream","text":"Detected end stream reaached","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detected if end of stream is reaached — atEndOfStream","text":"","code":"atEndOfStream(x)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detected if end of stream is reaached — atEndOfStream","text":"x GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detected if end of stream is reaached — atEndOfStream","text":"end stream reached, return TRUE.  Else FALSE","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detected if end of stream is reaached — atEndOfStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  obj = GenomicDataStream(file, \"DS\", chunkSize=5, initialize = TRUE)  # loop until break while( 1 ){    # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat = getNextChunk(obj)    if( atEndOfStream(obj) ) break        print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/featuresRead.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of features read from enomicDataStream — featuresRead","title":"Get number of features read from enomicDataStream — featuresRead","text":"Get number total features read enomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/featuresRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of features read from enomicDataStream — featuresRead","text":"","code":"featuresRead(x)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/featuresRead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of features read from enomicDataStream — featuresRead","text":"x GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/featuresRead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of features read from enomicDataStream — featuresRead","text":"total number features read stream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/featuresRead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of features read from enomicDataStream — featuresRead","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  obj = GenomicDataStream(file, \"DS\", chunkSize=5, initialize = TRUE)  # loop until break while( 1 ){    # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat = getNextChunk(obj)    if( atEndOfStream(obj) ) break        print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G  featuresRead( obj) #> [1] 10"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/getNextChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data chunk from GenomicDataStream — getNextChunk","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"Get data chunk GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/getNextChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"","code":"getNextChunk(x)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/getNextChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"x GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/getNextChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"get data chunk list entries X storing matrix features columns, info storing information feature rows","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/getNextChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  obj = GenomicDataStream(file, \"DS\", chunkSize=5, initialize = TRUE)  # loop until break while( 1 ){    # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat = getNextChunk(obj)    if( atEndOfStream(obj) ) break        print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/initializeStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize GenomicDataStream — initializeStream","title":"Initialize GenomicDataStream — initializeStream","text":"Read file info path initialise stream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/initializeStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize GenomicDataStream — initializeStream","text":"","code":"initializeStream(x)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/initializeStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize GenomicDataStream — initializeStream","text":"x GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/initializeStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize GenomicDataStream — initializeStream","text":"initialized GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/initializeStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize GenomicDataStream — initializeStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  obj = GenomicDataStream(file, \"DS\", chunkSize=5)  # by default, GenomicDataStream is not initialized isInitialized( obj ) #> [1] FALSE  # initialize obj = initializeStream( obj )  isInitialized( obj ) #> [1] TRUE"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/isInitialized.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of GenomicDataStream — isInitialized","title":"Get status of GenomicDataStream — isInitialized","text":"initialized, return TRUE, else FALSE","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/isInitialized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of GenomicDataStream — isInitialized","text":"","code":"isInitialized(x)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/isInitialized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of GenomicDataStream — isInitialized","text":"x GenomicDataStream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/isInitialized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of GenomicDataStream — isInitialized","text":"initialization status","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/isInitialized.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of GenomicDataStream — isInitialized","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  obj = GenomicDataStream(file, \"DS\", chunkSize=5)  # by default, GenomicDataStream is not initialized isInitialized( obj ) #> [1] FALSE  # initialize obj = initializeStream( obj )  isInitialized( obj ) #> [1] TRUE"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit series of linear regression models — lmFitFeatures,ANY,ANY,GenomicDataStream-method","title":"Fit series of linear regression models — lmFitFeatures,ANY,ANY,GenomicDataStream-method","text":"Fit series linear regression models","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit series of linear regression models — lmFitFeatures,ANY,ANY,GenomicDataStream-method","text":"","code":"# S4 method for class 'ANY,ANY,GenomicDataStream' lmFitFeatures(   y,   design,   data,   weights,   detail = 0,   preprojection = TRUE,   nthreads = 1,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit series of linear regression models — lmFitFeatures,ANY,ANY,GenomicDataStream-method","text":"y response vector design design matrix, mat sp_mat data matrix GenomicDataStream additional features fit one time weights sample-level weights detail return model specified level detail. LOW (beta, se, sigSq, rdf), MEDIUM (vcov), HIGH (residuals), (hatvalues) preprojection default true. Use preproject design matrix accelerate calculations nthreads number threads.  model fit serial, analysis parallelized across features ... args","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit series of linear regression models — lmFitFeatures,ANY,ANY,GenomicDataStream-method","text":"","code":"# create response, design and weights  y = seq(60) X_design = matrix(1, 60,1) w = rep(1,60)  # VCF file file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # Read data into R # then run lmFitFeatures() gds = GenomicDataStream(file, \"DS\", initialize=TRUE) dat = getNextChunk(gds) X_features = dat$X  res1 = lmFitFeatures(y, X_design, X_features, w)  # Data stays at C++ level # then run lmFitFeatures() gds = GenomicDataStream(file, \"DS\")  res2 = lmFitFeatures(y, X_design, gds, w) #>"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"Fit regression model Y[j,] ~ X feature j","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"","code":"# S4 method for class 'ANY' lmFitResponses(Y, design, Weights, detail = 0, nthreads = 1, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"Y matrix responses __rows__ design design matrix Weights matrix sample-level weights dimension Y detail level model detail returned, LOW = 0, MEDIUM = 1, HIGH = 2. LOW (beta, se, sigSq, rdf), MEDIUM (vcov), HIGH (residuals), (hatvalues) nthreads number threads.  model fit serial, analysis parallelized across responses. ... args","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"List parameter estimates entries coef,  se, sigSq, rdf depending detail","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"Since weights vary response, model computed separately without recycling precomputed values","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/lmFitResponses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit series of linear regression models to multiple responses with shared design matrix — lmFitResponses","text":"","code":"library(DelayedArray) #> Loading required package: stats4 #> Loading required package: Matrix #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, saveRDS, setdiff, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:Matrix’: #>  #>     expand, unname #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: S4Arrays #> Loading required package: abind #>  #> Attaching package: ‘S4Arrays’ #> The following object is masked from ‘package:abind’: #>  #>     abind #> The following object is masked from ‘package:base’: #>  #>     rowsum #> Loading required package: SparseArray #>  #> Attaching package: ‘DelayedArray’ #> The following objects are masked from ‘package:base’: #>  #>     apply, scale, sweep n = 100 m = 5 nc = 2 set.seed(1) Y = matrix(rnorm(n*m), m, n) Y = DelayedArray(Y) X = matrix(rnorm(n*nc), n,nc) rownames(Y) = seq(m) W = matrix(runif(n*m), m, n)   # fit regressions with model j using Y[j,] as a response fit = lmFitResponses(Y, X, W) #>  Models fit: 5    # examine results lapply(fit, head, 2) #> $coef #>         [,1]        [,2] #> 1 -0.2167269 -0.26282250 #> 2  0.1217050  0.08171999 #>  #> $se #>         [,1]       [,2] #> 1 0.09798615 0.08866582 #> 2 0.09649571 0.08894915 #>  #> $sigSq #>         1         2  #> 0.4200639 0.4111836  #>  #> $rdf #>  1  2  #> 98 98  #>"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print object — print,GenomicDataStream-method","title":"Print object — print,GenomicDataStream-method","text":"Print object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print object — print,GenomicDataStream-method","text":"","code":"# S4 method for class 'GenomicDataStream' print(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print object — print,GenomicDataStream-method","text":"x GenomicDataStream object ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show object — show,GenomicDataStream-method","title":"Show object — show,GenomicDataStream-method","text":"Show object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show object — show,GenomicDataStream-method","text":"","code":"# S4 method for class 'GenomicDataStream' show(object)"},{"path":"http://DiseaseNeurogenomics.github.io/GenomicDataStream/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show object — show,GenomicDataStream-method","text":"object GenomicDataStream object","code":""}]
