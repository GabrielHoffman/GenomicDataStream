[{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Data as a GenomicDataStream","text":"GenomicDataStreamRegression implements regression models (linear GLMs) stream chucks features using GenomicDataStream interface. general, variants genetic data used covariates lmFitFeatures(), genes single cell data used responses lmFitResponses().","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"read-genotype-data-into-r","dir":"Articles","previous_headings":"Usage > Example code with R","what":"Read genotype data into R","title":"Data as a GenomicDataStream","text":"","code":"library(GenomicDataStream) library(GenomicDataStreamRegression)   # VCF file file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize  gds = GenomicDataStream(file, \"DS\", chunkSize=5, initialize=TRUE)  n = 60 y = rnorm(n) design = matrix(1, n, 1)  # loop until break while( 1 ){      # get data chunk     # data$X matrix with features as columns     # data$info information about each feature as rows     dat = getNextChunk(gds)      # check if end of stream      if( atEndOfStream(gds) ) break          # do analysis on this chunk of data     # from GenomicDataStreamRegression     fit = lmFitFeatures(y, design, dat$X) }"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"use-r-to-run-analysis-at-c-level","dir":"Articles","previous_headings":"Usage > Example code with R","what":"Use R to run analysis at C++ level","title":"Data as a GenomicDataStream","text":"","code":"library(GenomicDataStream) library(GenomicDataStreamRegression)   # VCF file file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # create object, but don't read yet  # Read DS field storing dosage gds = GenomicDataStream(file, \"DS\", chunkSize=5)  n = 60 y = rnorm(n) design = matrix(1, n, 1)  # regression of y ~ design + X[,j] #   where X[,j] is the jth variant in the GenomicDataStream # data in GenomicDataStream is only accessed at C++ level  # from GenomicDataStreamRegression fit = lmFitFeatures(y, design, gds)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"example-code-with-c17","dir":"Articles","previous_headings":"Usage","what":"Example code with C++17","title":"Data as a GenomicDataStream","text":"Accessing data","code":"#include <RcppArmadillo.h> #include <GenomicDataStream.h>  // use namespace for GenomicDataStream using namespace gds;  // parameters  string file = \"test.vcf.gz\"; string field = \"DS\";    // read dosage field string region = \"\";     // no region filter string samples = \"-\";   // no samples filter int chunkSize = 4;      // each chunk will read 4 variants  // initialize parameters Param param(file, region, samples, chunkSize); param.setField( field );  // Initialise GenomicDataStream to read  // VCF/BCF and BGEN with same interface unique_ptr<GenomicDataStream> gdsStream = createFileView( param );  // declare DataChunk storing an Armadillo matrix for each chunk DataChunk<arma::mat> chunk;  // Store meta-data about each variant VariantInfo *info;  // loop through chunks while( gdsStream->getNextChunk( chunk ) ){      // get data from chunk     arma::mat X = chunk.getData();      // get variant information     info = chunk.getInfo<VariantInfo>();      // Do analysis with variants in this chunk     analysis_function(X, info); }"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"data-types","dir":"Articles","previous_headings":"","what":"Data types","title":"Data as a GenomicDataStream","text":"C++ level data GenomicDataStream can accessed multiple types according templated definition DataChunk. , chunk DataChunk<arma::mat> data returned Armadillo matrix doubles (.e. arma::mat). Suppported data types dense matricies : Importantly, types wraps array double storing data column-major order. types just provide different interfaces underlying array use downstream analysis. case, raw data read double array, constructor called requested data type using array underlying data object returned user. fact, constructors dense matrix types Eigen Armadillo return objects point original double array, without allocating new memory. GenomicDataStream also supports following sparse matrix types: case, constructor called requested data type converter double array sparse matrix.","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/GenomicDataStream.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Data as a GenomicDataStream","text":"<>","code":"## R version 4.4.1 (2024-06-14) ## Platform: aarch64-apple-darwin23.5.0 ## Running under: macOS Sonoma 14.7.1 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.4.1/lib/libRblas.dylib  ## LAPACK: /opt/homebrew/Cellar/r/4.4.2_2/lib/R/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] readr_2.1.5 ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5       cli_3.6.3         knitr_1.49        rlang_1.1.4       xfun_0.49         ##  [6] textshaping_0.4.0 jsonlite_1.8.9    glue_1.8.0        htmltools_0.5.8.1 ragg_1.3.3        ## [11] sass_0.4.9        hms_1.1.3         fansi_1.0.6       rmarkdown_2.29    evaluate_1.0.1    ## [16] jquerylib_0.1.4   tibble_3.2.1      tzdb_0.4.0        fastmap_1.2.0     yaml_2.3.10       ## [21] lifecycle_1.0.4   compiler_4.4.1    codetools_0.2-20  fs_1.6.5          htmlwidgets_1.6.4 ## [26] pkgconfig_2.0.3   systemfonts_1.1.0 digest_0.6.37     R6_2.5.1          utf8_1.2.4        ## [31] pillar_1.9.0      magrittr_2.0.3    bslib_0.8.0       tools_4.4.1       pkgdown_2.1.1     ## [36] cachem_1.1.0      desc_1.4.3"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/extensions.html","id":"additional-file-types","dir":"Articles","previous_headings":"","what":"Additional file types","title":"Extending GenomicDataStream","text":"Consider extending package support support new file type X. First, create new class Xstream inherits GenomicDataStream defined . Xstream must define constructor taking Param defined , implement interfaces getNextChunk() data type. DataChunk stores information feature sample class inheriting DataInfo. Streams genotype data store feature information VariantInfo class, DelayedStream uses MatrixInfo. classes custom class can used store information new file type. nothing else underlying data form assumed, GenomicDataStream designed chunks features rather chunks samples. Features stored columns matrix returned R/C++, independent underlying data storage format.","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/articles/extensions.html","id":"additional-matrix-types","dir":"Articles","previous_headings":"","what":"Additional matrix types","title":"Extending GenomicDataStream","text":"First, take look currently supported data types, note types wraps array double storing data column-major order. fact, constructors dense matrix types Eigen Armadillo return objects point original double array, without allocating new memory. new data type constructor takes double array. simplest new type implement float version existing type. reduce memory usage downstream analyses increase speed cost numerical precision.","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman G (2025). GenomicDataStream: Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) R/Rcpp chunks. R package version 0.0.13, https://github.com/GabrielHoffman/GenomicDataStream.","code":"@Manual{,   title = {GenomicDataStream: Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) into R/Rcpp in chunks},   author = {Gabriel Hoffman},   year = {2025},   note = {R package version 0.0.13},   url = {https://github.com/GabrielHoffman/GenomicDataStream}, }"},{"path":[]},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/index.html","id":"a-scalable-interface-between-data-and-analysis-underneath-r","dir":"","previous_headings":"GenomicDataStream","what":"A scalable interface between data and analysis underneath R","title":"Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) into R/Rcpp in chunks","text":"Reading genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD, DelayedArray) R/Rcpp chunks analysis Armadillo / Eigen / Rcpp libraries. Mondern datasets often big fit memory, many analyses operate small chunk features time. Yet practice, many implementations require whole dataset stored memory. Others pair analysis specific data format (.e. regresson analysis paired genotype data VCF) way two components can’t separated use applications. GenomicDataStream interface separate: data source streaming chunks features data matrix downstream analysis GenomicDataStream provides interfaces C++ R levels. C++ interface prioritizes efficiency, R interface wraps C++ backend non-technical users.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) into R/Rcpp in chunks","text":"","code":"# install latest version of pgenlibr devtools::install_github(\"chrchang/plink-ng\", subdir = \"2.0/pgenlibr\")  # install latest version of GenomicDataStream devtools::install_github(\"GabrielHoffman/GenomicDataStream\")  # currently, works with BH v1.84.0.0 # it will not work with a more recent version"},{"path":[]},{"path":[]},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/index.html","id":"single-cell-data","dir":"","previous_headings":"Supported formats","what":"Single cell data","title":"Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) into R/Rcpp in chunks","text":"Count matrices single cell data stored H5AD format. format, based HDF5, can store millions cells since designed sparse counts (.e. many entries 0) uses built-compression. H5AD enables file-backed random access analyzing subset data without reading entire file memory.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Read genomic data files (VCF, BCF, BGEN, PGEN, BED, H5AD) into R/Rcpp in chunks","text":"GenomicDataStream provide flexability terms data input types matrix libraries. can useful many cases, large number dependencies can require installation additional libraries increase compile times. dependencies can avoided removing support capabilities compiler flags Makevars: -D DISABLE_DELAYED_STREAM            Omit DelayedStream class, remove dependence Rcpp beachmat -D DISABLE_EIGEN            Omit support Eigen matrix library, remove dependence RcppEigen Eigen -D DISABLE_RCPP            Omit support Rcpp matrix library, remove dependence Rcpp -D DISABLE_PLINK            Omit support PLINK files (PGEN, BED), remove dependence pgenlibr GenomicDataStream written core functions C++17 dependence R Rcpp. top , thin wrapper uses Rcpp interface R lower-level library.","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface to genomic data files — GenomicDataStream-class","title":"Interface to genomic data files — GenomicDataStream-class","text":"Read genomic data files (VCF, BCF, BGEN, h5ad) R/Rcpp chunks analysis Armadillo Eigen libraries","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":null,"dir":"Reference","previous_headings":"","what":"GenomicDataStream — GenomicDataStream","title":"GenomicDataStream — GenomicDataStream","text":"Read genomic data files (VCF, BCF, BGEN, h5ad) R/Rcpp chunks analysis Armadillo Eigen libraries Interface GenomicDataStream C++ code","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GenomicDataStream — GenomicDataStream","text":"","code":"GenomicDataStream(   file,   field = \"\",   region = \"\",   samples = \"-\",   chunkSize = 1000,   missingToMean = FALSE,   initialize = FALSE )"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GenomicDataStream — GenomicDataStream","text":"file file VCF/BCF/BGEN/PGEN format index field field VCF/BCF read region target format chr2:1-12345. Multiple regions can separated one \",\\n\\t\", example \"chr2:1-12345, chr3:1000-8000\". Setting region \"\" includes variants samples string comma separated sample IDs extract: \"ID1,ID2,ID3\".  \"-\" indicates samples chunkSize number variants return per chunk missingToMean true, set missing values mean dosage value. false, set NaN initialize default FALSE.  TRUE, file info read path, otherwise store path GenomicDataStream initialized later","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GenomicDataStream — GenomicDataStream","text":"object class GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/GenomicDataStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GenomicDataStream — GenomicDataStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize obj <- GenomicDataStream(file, \"DS\", chunkSize = 5, initialize = TRUE)  obj #> \t\t GenomicDataStream  #>  #>   file:          test.vcf.gz  #>   initialized:   TRUE  #>   stream type:   vcf.gz  #>   field:         DS  #>   region:          #>   samples:       60  #>   missingToMean: FALSE  #>   chunkSize:     5  #>   features read: 0  #>   end of stream: FALSE   # loop until break while (1) {   # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat <- getNextChunk(obj)    if (atEndOfStream(obj)) break    print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G #"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/atEndOfStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Detected if end of stream is reaached — atEndOfStream","title":"Detected if end of stream is reaached — atEndOfStream","text":"Detected end stream reaached","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detected if end of stream is reaached — atEndOfStream","text":"","code":"atEndOfStream(x)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detected if end of stream is reaached — atEndOfStream","text":"x GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detected if end of stream is reaached — atEndOfStream","text":"end stream reached, return TRUE.  Else FALSE","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/atEndOfStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detected if end of stream is reaached — atEndOfStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize obj <- GenomicDataStream(file, \"DS\", chunkSize = 5, initialize = TRUE)  # loop until break while (1) {   # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat <- getNextChunk(obj)    if (atEndOfStream(obj)) break    print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/featuresRead.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of features read from enomicDataStream — featuresRead","title":"Get number of features read from enomicDataStream — featuresRead","text":"Get number total features read enomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/featuresRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of features read from enomicDataStream — featuresRead","text":"","code":"featuresRead(x)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/featuresRead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of features read from enomicDataStream — featuresRead","text":"x GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/featuresRead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of features read from enomicDataStream — featuresRead","text":"total number features read stream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/featuresRead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of features read from enomicDataStream — featuresRead","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize obj <- GenomicDataStream(file, \"DS\", chunkSize = 5, initialize = TRUE)  # loop until break while (1) {   # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat <- getNextChunk(obj)    if (atEndOfStream(obj)) break    print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G  featuresRead(obj) #> [1] 10"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/getNextChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data chunk from GenomicDataStream — getNextChunk","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"Get data chunk GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/getNextChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"","code":"getNextChunk(x)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/getNextChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"x GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/getNextChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"get data chunk list entries X storing matrix features columns, info storing information feature rows","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/getNextChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data chunk from GenomicDataStream — getNextChunk","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  # initialize obj <- GenomicDataStream(file, \"DS\", chunkSize = 5, initialize = TRUE)  # loop until break while (1) {   # get data chunk   # data$X matrix with features as columns   # data$info information about each feature as rows   dat <- getNextChunk(obj)    if (atEndOfStream(obj)) break    print(dat$info) } #>   CHROM   POS          ID A1 A2 #> 1     1 10000 1:10000:C:A  C  A #> 2     1 11000 1:11000:T:C  T  C #> 3     1 12000 1:12000:T:C  T  C #> 4     1 13000 1:13000:T:C  T  C #> 5     1 14000 1:14000:G:C  G  C #>   CHROM   POS          ID A1 A2 #> 1     1 15000 1:15000:A:C  A  C #> 2     1 16000 1:16000:G:A  G  A #> 3     1 17000 1:17000:C:A  C  A #> 4     1 18000 1:18000:C:G  C  G #> 5     1 19000 1:19000:T:G  T  G"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/initializeStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize GenomicDataStream — initializeStream","title":"Initialize GenomicDataStream — initializeStream","text":"Read file info path initialise stream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/initializeStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize GenomicDataStream — initializeStream","text":"","code":"initializeStream(x)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/initializeStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize GenomicDataStream — initializeStream","text":"x GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/initializeStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize GenomicDataStream — initializeStream","text":"initialized GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/initializeStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize GenomicDataStream — initializeStream","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  obj <- GenomicDataStream(file, \"DS\", chunkSize = 5)  # by default, GenomicDataStream is not initialized isInitialized(obj) #> [1] FALSE  # initialize obj <- initializeStream(obj)  isInitialized(obj) #> [1] TRUE #"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/isInitialized.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of GenomicDataStream — isInitialized","title":"Get status of GenomicDataStream — isInitialized","text":"initialized, return TRUE, else FALSE","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/isInitialized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of GenomicDataStream — isInitialized","text":"","code":"isInitialized(x)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/isInitialized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of GenomicDataStream — isInitialized","text":"x GenomicDataStream","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/isInitialized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of GenomicDataStream — isInitialized","text":"initialization status","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/isInitialized.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get status of GenomicDataStream — isInitialized","text":"","code":"file <- system.file(\"extdata\", \"test.vcf.gz\", package = \"GenomicDataStream\")  obj <- GenomicDataStream(file, \"DS\", chunkSize = 5)  # by default, GenomicDataStream is not initialized isInitialized(obj) #> [1] FALSE  # initialize obj <- initializeStream(obj)  isInitialized(obj) #> [1] TRUE #"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print object — print,GenomicDataStream-method","title":"Print object — print,GenomicDataStream-method","text":"Print object","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print object — print,GenomicDataStream-method","text":"","code":"# S4 method for class 'GenomicDataStream' print(x, ...)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print object — print,GenomicDataStream-method","text":"x GenomicDataStream object ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show object — show,GenomicDataStream-method","title":"Show object — show,GenomicDataStream-method","text":"Show object","code":""},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show object — show,GenomicDataStream-method","text":"","code":"# S4 method for class 'GenomicDataStream' show(object)"},{"path":"http://gabrielhoffman.github.io/GenomicDataStream/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show object — show,GenomicDataStream-method","text":"object GenomicDataStream object","code":""}]
