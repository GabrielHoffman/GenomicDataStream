// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GenomicDataStream.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// extractVcf
List extractVcf(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_eigen
List extractVcf_eigen(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_eigen(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_eigen(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_NM
List extractVcf_NM(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_NM(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_NM(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_vector
List extractVcf_vector(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_vector(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_vector(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_chunks
List extractVcf_chunks(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_chunks(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_chunks(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getDosage
Rcpp::List getDosage(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_getDosage(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(getDosage(file, field, region, samples, chunkSize, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// colSums_test
arma::vec colSums_test(const arma::mat& X);
RcppExport SEXP _GenomicDataStream_colSums_test(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_test(X));
    return rcpp_result_gen;
END_RCPP
}
// standardize_test
void standardize_test(arma::mat& X, const bool& center, const bool& scale);
RcppExport SEXP _GenomicDataStream_standardize_test(SEXP XSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scale(scaleSEXP);
    standardize_test(X, center, scale);
    return R_NilValue;
END_RCPP
}
// fastLM
List fastLM(const arma::colvec& y, const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean, const int& nthreads);
RcppExport SEXP _GenomicDataStream_fastLM(SEXP ySEXP, SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fastLM(y, file, field, region, samples, chunkSize, missingToMean, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicDataStream_extractVcf", (DL_FUNC) &_GenomicDataStream_extractVcf, 5},
    {"_GenomicDataStream_extractVcf_eigen", (DL_FUNC) &_GenomicDataStream_extractVcf_eigen, 5},
    {"_GenomicDataStream_extractVcf_NM", (DL_FUNC) &_GenomicDataStream_extractVcf_NM, 5},
    {"_GenomicDataStream_extractVcf_vector", (DL_FUNC) &_GenomicDataStream_extractVcf_vector, 5},
    {"_GenomicDataStream_extractVcf_chunks", (DL_FUNC) &_GenomicDataStream_extractVcf_chunks, 5},
    {"_GenomicDataStream_getDosage", (DL_FUNC) &_GenomicDataStream_getDosage, 6},
    {"_GenomicDataStream_colSums_test", (DL_FUNC) &_GenomicDataStream_colSums_test, 1},
    {"_GenomicDataStream_standardize_test", (DL_FUNC) &_GenomicDataStream_standardize_test, 3},
    {"_GenomicDataStream_fastLM", (DL_FUNC) &_GenomicDataStream_fastLM, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicDataStream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
