// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GenomicDataStream.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_xptr
SEXP create_xptr(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_create_xptr(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr(file, field, region, samples, chunkSize, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getInfo
List getInfo(SEXP x);
RcppExport SEXP _GenomicDataStream_getInfo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getInfo(x));
    return rcpp_result_gen;
END_RCPP
}
// atEndOfStream_rcpp
bool atEndOfStream_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_atEndOfStream_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(atEndOfStream_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// featuresRead_rcpp
long featuresRead_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_featuresRead_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(featuresRead_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// getNextChunk_rcpp
List getNextChunk_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_getNextChunk_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextChunk_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// colSums_test
arma::vec colSums_test(const arma::mat& X);
RcppExport SEXP _GenomicDataStream_colSums_test(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_test(X));
    return rcpp_result_gen;
END_RCPP
}
// standardize_test
void standardize_test(arma::mat& X, const bool& center, const bool& scale);
RcppExport SEXP _GenomicDataStream_standardize_test(SEXP XSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scale(scaleSEXP);
    standardize_test(X, center, scale);
    return R_NilValue;
END_RCPP
}
// test_DataTable
void test_DataTable(const string& file, const string& headerKey, const char delim);
RcppExport SEXP _GenomicDataStream_test_DataTable(SEXP fileSEXP, SEXP headerKeySEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const string& >::type headerKey(headerKeySEXP);
    Rcpp::traits::input_parameter< const char >::type delim(delimSEXP);
    test_DataTable(file, headerKey, delim);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicDataStream_create_xptr", (DL_FUNC) &_GenomicDataStream_create_xptr, 6},
    {"_GenomicDataStream_getInfo", (DL_FUNC) &_GenomicDataStream_getInfo, 1},
    {"_GenomicDataStream_atEndOfStream_rcpp", (DL_FUNC) &_GenomicDataStream_atEndOfStream_rcpp, 1},
    {"_GenomicDataStream_featuresRead_rcpp", (DL_FUNC) &_GenomicDataStream_featuresRead_rcpp, 1},
    {"_GenomicDataStream_getNextChunk_rcpp", (DL_FUNC) &_GenomicDataStream_getNextChunk_rcpp, 1},
    {"_GenomicDataStream_colSums_test", (DL_FUNC) &_GenomicDataStream_colSums_test, 1},
    {"_GenomicDataStream_standardize_test", (DL_FUNC) &_GenomicDataStream_standardize_test, 3},
    {"_GenomicDataStream_test_DataTable", (DL_FUNC) &_GenomicDataStream_test_DataTable, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicDataStream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
