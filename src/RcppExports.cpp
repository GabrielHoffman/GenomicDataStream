// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GenomicDataStream.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_GT
arma::vec test_GT(const std::string& vcffile, const std::string& region);
RcppExport SEXP _GenomicDataStream_test_GT(SEXP vcffileSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(test_GT(vcffile, region));
    return rcpp_result_gen;
END_RCPP
}
// test_DS
arma::vec test_DS(const std::string& vcffile, const std::string& region);
RcppExport SEXP _GenomicDataStream_test_DS(SEXP vcffileSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(test_DS(vcffile, region));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf
List extractVcf(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_eigen
List extractVcf_eigen(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_eigen(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_eigen(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_NM
List extractVcf_NM(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_NM(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_NM(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_chunks
List extractVcf_chunks(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_chunks(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_chunks(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getDA
NumericMatrix getDA(const RObject& mat);
RcppExport SEXP _GenomicDataStream_getDA(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getDA(mat));
    return rcpp_result_gen;
END_RCPP
}
// getDA_eigen
NumericMatrix getDA_eigen(const RObject& mat);
RcppExport SEXP _GenomicDataStream_getDA_eigen(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getDA_eigen(mat));
    return rcpp_result_gen;
END_RCPP
}
// getDA_NM
Rcpp::NumericMatrix getDA_NM(const RObject& mat);
RcppExport SEXP _GenomicDataStream_getDA_NM(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getDA_NM(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicDataStream_test_GT", (DL_FUNC) &_GenomicDataStream_test_GT, 2},
    {"_GenomicDataStream_test_DS", (DL_FUNC) &_GenomicDataStream_test_DS, 2},
    {"_GenomicDataStream_extractVcf", (DL_FUNC) &_GenomicDataStream_extractVcf, 5},
    {"_GenomicDataStream_extractVcf_eigen", (DL_FUNC) &_GenomicDataStream_extractVcf_eigen, 5},
    {"_GenomicDataStream_extractVcf_NM", (DL_FUNC) &_GenomicDataStream_extractVcf_NM, 5},
    {"_GenomicDataStream_extractVcf_chunks", (DL_FUNC) &_GenomicDataStream_extractVcf_chunks, 5},
    {"_GenomicDataStream_getDA", (DL_FUNC) &_GenomicDataStream_getDA, 1},
    {"_GenomicDataStream_getDA_eigen", (DL_FUNC) &_GenomicDataStream_getDA_eigen, 1},
    {"_GenomicDataStream_getDA_NM", (DL_FUNC) &_GenomicDataStream_getDA_NM, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicDataStream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
