// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GenomicDataStream.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// extractVcf
List extractVcf(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_eigen
List extractVcf_eigen(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_eigen(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_eigen(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_NM
List extractVcf_NM(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_NM(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_NM(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_vector
List extractVcf_vector(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_vector(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_vector(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// extractVcf_chunks
List extractVcf_chunks(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_extractVcf_chunks(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(extractVcf_chunks(file, field, region, samples, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getDA
List getDA(const RObject& mat, const vector<string>& rowNames, const int& chunkSize);
RcppExport SEXP _GenomicDataStream_getDA(SEXP matSEXP, SEXP rowNamesSEXP, SEXP chunkSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type rowNames(rowNamesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getDA(mat, rowNames, chunkSize));
    return rcpp_result_gen;
END_RCPP
}
// getDosage
Rcpp::List getDosage(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_getDosage(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(getDosage(file, field, region, samples, chunkSize, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// create_xptr
SEXP create_xptr(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_create_xptr(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr(file, field, region, samples, chunkSize, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getInfo
List getInfo(SEXP x);
RcppExport SEXP _GenomicDataStream_getInfo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getInfo(x));
    return rcpp_result_gen;
END_RCPP
}
// atEndOfStream_rcpp
bool atEndOfStream_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_atEndOfStream_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(atEndOfStream_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// featuresRead_rcpp
long featuresRead_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_featuresRead_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(featuresRead_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// getNextChunk_rcpp
List getNextChunk_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_getNextChunk_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextChunk_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// colSums_test
arma::vec colSums_test(const arma::mat& X);
RcppExport SEXP _GenomicDataStream_colSums_test(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_test(X));
    return rcpp_result_gen;
END_RCPP
}
// standardize_test
void standardize_test(arma::mat& X, const bool& center, const bool& scale);
RcppExport SEXP _GenomicDataStream_standardize_test(SEXP XSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scale(scaleSEXP);
    standardize_test(X, center, scale);
    return R_NilValue;
END_RCPP
}
// NewPvar
SEXP NewPvar(String filename);
RcppExport SEXP _GenomicDataStream_NewPvar(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(NewPvar(filename));
    return rcpp_result_gen;
END_RCPP
}
// GetVariantId
String GetVariantId(List pvar, int variant_num);
RcppExport SEXP _GenomicDataStream_GetVariantId(SEXP pvarSEXP, SEXP variant_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar(pvarSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    rcpp_result_gen = Rcpp::wrap(GetVariantId(pvar, variant_num));
    return rcpp_result_gen;
END_RCPP
}
// GetVariantsById
IntegerVector GetVariantsById(List pvar, String id);
RcppExport SEXP _GenomicDataStream_GetVariantsById(SEXP pvarSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar(pvarSEXP);
    Rcpp::traits::input_parameter< String >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(GetVariantsById(pvar, id));
    return rcpp_result_gen;
END_RCPP
}
// GetAlleleCode
String GetAlleleCode(List pvar, int variant_num, int allele_num);
RcppExport SEXP _GenomicDataStream_GetAlleleCode(SEXP pvarSEXP, SEXP variant_numSEXP, SEXP allele_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar(pvarSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    Rcpp::traits::input_parameter< int >::type allele_num(allele_numSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAlleleCode(pvar, variant_num, allele_num));
    return rcpp_result_gen;
END_RCPP
}
// ClosePvar
void ClosePvar(List pvar);
RcppExport SEXP _GenomicDataStream_ClosePvar(SEXP pvarSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar(pvarSEXP);
    ClosePvar(pvar);
    return R_NilValue;
END_RCPP
}
// NewPgen
SEXP NewPgen(String filename, Nullable<List> pvar, Nullable<int> raw_sample_ct, Nullable<IntegerVector> sample_subset);
RcppExport SEXP _GenomicDataStream_NewPgen(SEXP filenameSEXP, SEXP pvarSEXP, SEXP raw_sample_ctSEXP, SEXP sample_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type pvar(pvarSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type raw_sample_ct(raw_sample_ctSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type sample_subset(sample_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(NewPgen(filename, pvar, raw_sample_ct, sample_subset));
    return rcpp_result_gen;
END_RCPP
}
// GetRawSampleCt
int GetRawSampleCt(List pgen);
RcppExport SEXP _GenomicDataStream_GetRawSampleCt(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRawSampleCt(pgen));
    return rcpp_result_gen;
END_RCPP
}
// GetVariantCt
int GetVariantCt(List pvar_or_pgen);
RcppExport SEXP _GenomicDataStream_GetVariantCt(SEXP pvar_or_pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar_or_pgen(pvar_or_pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(GetVariantCt(pvar_or_pgen));
    return rcpp_result_gen;
END_RCPP
}
// GetAlleleCt
int GetAlleleCt(List pvar_or_pgen, int variant_num);
RcppExport SEXP _GenomicDataStream_GetAlleleCt(SEXP pvar_or_pgenSEXP, SEXP variant_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar_or_pgen(pvar_or_pgenSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAlleleCt(pvar_or_pgen, variant_num));
    return rcpp_result_gen;
END_RCPP
}
// GetMaxAlleleCt
int GetMaxAlleleCt(List pvar_or_pgen);
RcppExport SEXP _GenomicDataStream_GetMaxAlleleCt(SEXP pvar_or_pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pvar_or_pgen(pvar_or_pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMaxAlleleCt(pvar_or_pgen));
    return rcpp_result_gen;
END_RCPP
}
// HardcallPhasePresent
bool HardcallPhasePresent(List pgen);
RcppExport SEXP _GenomicDataStream_HardcallPhasePresent(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(HardcallPhasePresent(pgen));
    return rcpp_result_gen;
END_RCPP
}
// Buf
NumericVector Buf(List pgen);
RcppExport SEXP _GenomicDataStream_Buf(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(Buf(pgen));
    return rcpp_result_gen;
END_RCPP
}
// AlleleCodeBuf
NumericVector AlleleCodeBuf(List pgen);
RcppExport SEXP _GenomicDataStream_AlleleCodeBuf(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(AlleleCodeBuf(pgen));
    return rcpp_result_gen;
END_RCPP
}
// IntBuf
IntegerVector IntBuf(List pgen);
RcppExport SEXP _GenomicDataStream_IntBuf(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(IntBuf(pgen));
    return rcpp_result_gen;
END_RCPP
}
// IntAlleleCodeBuf
IntegerVector IntAlleleCodeBuf(List pgen);
RcppExport SEXP _GenomicDataStream_IntAlleleCodeBuf(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(IntAlleleCodeBuf(pgen));
    return rcpp_result_gen;
END_RCPP
}
// BoolBuf
LogicalVector BoolBuf(List pgen);
RcppExport SEXP _GenomicDataStream_BoolBuf(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    rcpp_result_gen = Rcpp::wrap(BoolBuf(pgen));
    return rcpp_result_gen;
END_RCPP
}
// ReadHardcalls
void ReadHardcalls(List pgen, SEXP buf, int variant_num, int allele_num);
RcppExport SEXP _GenomicDataStream_ReadHardcalls(SEXP pgenSEXP, SEXP bufSEXP, SEXP variant_numSEXP, SEXP allele_numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< SEXP >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    Rcpp::traits::input_parameter< int >::type allele_num(allele_numSEXP);
    ReadHardcalls(pgen, buf, variant_num, allele_num);
    return R_NilValue;
END_RCPP
}
// Read
void Read(List pgen, NumericVector buf, int variant_num, int allele_num);
RcppExport SEXP _GenomicDataStream_Read(SEXP pgenSEXP, SEXP bufSEXP, SEXP variant_numSEXP, SEXP allele_numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type buf(bufSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    Rcpp::traits::input_parameter< int >::type allele_num(allele_numSEXP);
    Read(pgen, buf, variant_num, allele_num);
    return R_NilValue;
END_RCPP
}
// ReadAlleles
void ReadAlleles(List pgen, SEXP acbuf, int variant_num, Nullable<LogicalVector> phasepresent_buf);
RcppExport SEXP _GenomicDataStream_ReadAlleles(SEXP pgenSEXP, SEXP acbufSEXP, SEXP variant_numSEXP, SEXP phasepresent_bufSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< SEXP >::type acbuf(acbufSEXP);
    Rcpp::traits::input_parameter< int >::type variant_num(variant_numSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type phasepresent_buf(phasepresent_bufSEXP);
    ReadAlleles(pgen, acbuf, variant_num, phasepresent_buf);
    return R_NilValue;
END_RCPP
}
// ReadIntList
IntegerMatrix ReadIntList(List pgen, IntegerVector variant_subset);
RcppExport SEXP _GenomicDataStream_ReadIntList(SEXP pgenSEXP, SEXP variant_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type variant_subset(variant_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadIntList(pgen, variant_subset));
    return rcpp_result_gen;
END_RCPP
}
// ReadList
NumericMatrix ReadList(List pgen, IntegerVector variant_subset, bool meanimpute);
RcppExport SEXP _GenomicDataStream_ReadList(SEXP pgenSEXP, SEXP variant_subsetSEXP, SEXP meanimputeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type variant_subset(variant_subsetSEXP);
    Rcpp::traits::input_parameter< bool >::type meanimpute(meanimputeSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadList(pgen, variant_subset, meanimpute));
    return rcpp_result_gen;
END_RCPP
}
// VariantScores
NumericVector VariantScores(List pgen, NumericVector weights, Nullable<IntegerVector> variant_subset);
RcppExport SEXP _GenomicDataStream_VariantScores(SEXP pgenSEXP, SEXP weightsSEXP, SEXP variant_subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type variant_subset(variant_subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(VariantScores(pgen, weights, variant_subset));
    return rcpp_result_gen;
END_RCPP
}
// ClosePgen
void ClosePgen(List pgen);
RcppExport SEXP _GenomicDataStream_ClosePgen(SEXP pgenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pgen(pgenSEXP);
    ClosePgen(pgen);
    return R_NilValue;
END_RCPP
}
// test_lm
List test_lm(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _GenomicDataStream_test_lm(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_lm(X, y));
    return rcpp_result_gen;
END_RCPP
}
// lmFitFeatures_export
List lmFitFeatures_export(const arma::colvec& y, const arma::mat& X_design, List gds, const arma::vec& weights, const int& detail, const bool& preprojection, const int& nthreads, const bool& verbose);
RcppExport SEXP _GenomicDataStream_lmFitFeatures_export(SEXP ySEXP, SEXP X_designSEXP, SEXP gdsSEXP, SEXP weightsSEXP, SEXP detailSEXP, SEXP preprojectionSEXP, SEXP nthreadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< List >::type gds(gdsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type preprojection(preprojectionSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(lmFitFeatures_export(y, X_design, gds, weights, detail, preprojection, nthreads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// lmFitResponses_export
List lmFitResponses_export(const RObject& mat, const arma::mat& X_design, const vector<string>& ids, const arma::mat& Weights, const int& chunkSize, const int& detail, const int& nthreads, const bool& verbose);
RcppExport SEXP _GenomicDataStream_lmFitResponses_export(SEXP matSEXP, SEXP X_designSEXP, SEXP idsSEXP, SEXP WeightsSEXP, SEXP chunkSizeSEXP, SEXP detailSEXP, SEXP nthreadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Weights(WeightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(lmFitResponses_export(mat, X_design, ids, Weights, chunkSize, detail, nthreads, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicDataStream_extractVcf", (DL_FUNC) &_GenomicDataStream_extractVcf, 5},
    {"_GenomicDataStream_extractVcf_eigen", (DL_FUNC) &_GenomicDataStream_extractVcf_eigen, 5},
    {"_GenomicDataStream_extractVcf_NM", (DL_FUNC) &_GenomicDataStream_extractVcf_NM, 5},
    {"_GenomicDataStream_extractVcf_vector", (DL_FUNC) &_GenomicDataStream_extractVcf_vector, 5},
    {"_GenomicDataStream_extractVcf_chunks", (DL_FUNC) &_GenomicDataStream_extractVcf_chunks, 5},
    {"_GenomicDataStream_getDA", (DL_FUNC) &_GenomicDataStream_getDA, 3},
    {"_GenomicDataStream_getDosage", (DL_FUNC) &_GenomicDataStream_getDosage, 6},
    {"_GenomicDataStream_create_xptr", (DL_FUNC) &_GenomicDataStream_create_xptr, 6},
    {"_GenomicDataStream_getInfo", (DL_FUNC) &_GenomicDataStream_getInfo, 1},
    {"_GenomicDataStream_atEndOfStream_rcpp", (DL_FUNC) &_GenomicDataStream_atEndOfStream_rcpp, 1},
    {"_GenomicDataStream_featuresRead_rcpp", (DL_FUNC) &_GenomicDataStream_featuresRead_rcpp, 1},
    {"_GenomicDataStream_getNextChunk_rcpp", (DL_FUNC) &_GenomicDataStream_getNextChunk_rcpp, 1},
    {"_GenomicDataStream_colSums_test", (DL_FUNC) &_GenomicDataStream_colSums_test, 1},
    {"_GenomicDataStream_standardize_test", (DL_FUNC) &_GenomicDataStream_standardize_test, 3},
    {"_GenomicDataStream_NewPvar", (DL_FUNC) &_GenomicDataStream_NewPvar, 1},
    {"_GenomicDataStream_GetVariantId", (DL_FUNC) &_GenomicDataStream_GetVariantId, 2},
    {"_GenomicDataStream_GetVariantsById", (DL_FUNC) &_GenomicDataStream_GetVariantsById, 2},
    {"_GenomicDataStream_GetAlleleCode", (DL_FUNC) &_GenomicDataStream_GetAlleleCode, 3},
    {"_GenomicDataStream_ClosePvar", (DL_FUNC) &_GenomicDataStream_ClosePvar, 1},
    {"_GenomicDataStream_NewPgen", (DL_FUNC) &_GenomicDataStream_NewPgen, 4},
    {"_GenomicDataStream_GetRawSampleCt", (DL_FUNC) &_GenomicDataStream_GetRawSampleCt, 1},
    {"_GenomicDataStream_GetVariantCt", (DL_FUNC) &_GenomicDataStream_GetVariantCt, 1},
    {"_GenomicDataStream_GetAlleleCt", (DL_FUNC) &_GenomicDataStream_GetAlleleCt, 2},
    {"_GenomicDataStream_GetMaxAlleleCt", (DL_FUNC) &_GenomicDataStream_GetMaxAlleleCt, 1},
    {"_GenomicDataStream_HardcallPhasePresent", (DL_FUNC) &_GenomicDataStream_HardcallPhasePresent, 1},
    {"_GenomicDataStream_Buf", (DL_FUNC) &_GenomicDataStream_Buf, 1},
    {"_GenomicDataStream_AlleleCodeBuf", (DL_FUNC) &_GenomicDataStream_AlleleCodeBuf, 1},
    {"_GenomicDataStream_IntBuf", (DL_FUNC) &_GenomicDataStream_IntBuf, 1},
    {"_GenomicDataStream_IntAlleleCodeBuf", (DL_FUNC) &_GenomicDataStream_IntAlleleCodeBuf, 1},
    {"_GenomicDataStream_BoolBuf", (DL_FUNC) &_GenomicDataStream_BoolBuf, 1},
    {"_GenomicDataStream_ReadHardcalls", (DL_FUNC) &_GenomicDataStream_ReadHardcalls, 4},
    {"_GenomicDataStream_Read", (DL_FUNC) &_GenomicDataStream_Read, 4},
    {"_GenomicDataStream_ReadAlleles", (DL_FUNC) &_GenomicDataStream_ReadAlleles, 4},
    {"_GenomicDataStream_ReadIntList", (DL_FUNC) &_GenomicDataStream_ReadIntList, 2},
    {"_GenomicDataStream_ReadList", (DL_FUNC) &_GenomicDataStream_ReadList, 3},
    {"_GenomicDataStream_VariantScores", (DL_FUNC) &_GenomicDataStream_VariantScores, 3},
    {"_GenomicDataStream_ClosePgen", (DL_FUNC) &_GenomicDataStream_ClosePgen, 1},
    {"_GenomicDataStream_test_lm", (DL_FUNC) &_GenomicDataStream_test_lm, 2},
    {"_GenomicDataStream_lmFitFeatures_export", (DL_FUNC) &_GenomicDataStream_lmFitFeatures_export, 8},
    {"_GenomicDataStream_lmFitResponses_export", (DL_FUNC) &_GenomicDataStream_lmFitResponses_export, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicDataStream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
