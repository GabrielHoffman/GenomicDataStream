// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GenomicDataStream.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_xptr
SEXP create_xptr(const std::string& file, const std::string& field, const std::string& region, const std::string& samples, const int& chunkSize, const bool& missingToMean);
RcppExport SEXP _GenomicDataStream_create_xptr(SEXP fileSEXP, SEXP fieldSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP chunkSizeSEXP, SEXP missingToMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type field(fieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type missingToMean(missingToMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr(file, field, region, samples, chunkSize, missingToMean));
    return rcpp_result_gen;
END_RCPP
}
// getInfo
List getInfo(SEXP x);
RcppExport SEXP _GenomicDataStream_getInfo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getInfo(x));
    return rcpp_result_gen;
END_RCPP
}
// atEndOfStream_rcpp
bool atEndOfStream_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_atEndOfStream_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(atEndOfStream_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// featuresRead_rcpp
long featuresRead_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_featuresRead_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(featuresRead_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// getNextChunk_rcpp
List getNextChunk_rcpp(SEXP x);
RcppExport SEXP _GenomicDataStream_getNextChunk_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextChunk_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// colSums_test
arma::vec colSums_test(const arma::mat& X);
RcppExport SEXP _GenomicDataStream_colSums_test(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_test(X));
    return rcpp_result_gen;
END_RCPP
}
// standardize_test
void standardize_test(arma::mat& X, const bool& center, const bool& scale);
RcppExport SEXP _GenomicDataStream_standardize_test(SEXP XSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scale(scaleSEXP);
    standardize_test(X, center, scale);
    return R_NilValue;
END_RCPP
}
// test_DataTable
void test_DataTable(const string& file, const string& headerKey, const char delim);
RcppExport SEXP _GenomicDataStream_test_DataTable(SEXP fileSEXP, SEXP headerKeySEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const string& >::type headerKey(headerKeySEXP);
    Rcpp::traits::input_parameter< const char >::type delim(delimSEXP);
    test_DataTable(file, headerKey, delim);
    return R_NilValue;
END_RCPP
}
// test_lm
List test_lm(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _GenomicDataStream_test_lm(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_lm(X, y));
    return rcpp_result_gen;
END_RCPP
}
// lmFitFeatures_export
List lmFitFeatures_export(const arma::colvec& y, const arma::mat& X_design, List gds, const arma::vec& weights, const int& detail, const bool& preprojection, const int& nthreads);
RcppExport SEXP _GenomicDataStream_lmFitFeatures_export(SEXP ySEXP, SEXP X_designSEXP, SEXP gdsSEXP, SEXP weightsSEXP, SEXP detailSEXP, SEXP preprojectionSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< List >::type gds(gdsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type preprojection(preprojectionSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(lmFitFeatures_export(y, X_design, gds, weights, detail, preprojection, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// lmFitResponses_export
List lmFitResponses_export(const RObject& mat, const arma::mat& X_design, const vector<string>& ids, const arma::mat& Weights, const int& chunkSize, const int& detail, const int& nthreads, const bool& verbose);
RcppExport SEXP _GenomicDataStream_lmFitResponses_export(SEXP matSEXP, SEXP X_designSEXP, SEXP idsSEXP, SEXP WeightsSEXP, SEXP chunkSizeSEXP, SEXP detailSEXP, SEXP nthreadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Weights(WeightsSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(lmFitResponses_export(mat, X_design, ids, Weights, chunkSize, detail, nthreads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// glmFitFeatures_export
List glmFitFeatures_export(const arma::colvec& y, const arma::mat& X_design, List gds, const std::string& family, const arma::vec& weights, const arma::vec& offset, const int detail, const bool& doCoxReid, const bool& shareTheta, const int& nthreads);
RcppExport SEXP _GenomicDataStream_glmFitFeatures_export(SEXP ySEXP, SEXP X_designSEXP, SEXP gdsSEXP, SEXP familySEXP, SEXP weightsSEXP, SEXP offsetSEXP, SEXP detailSEXP, SEXP doCoxReidSEXP, SEXP shareThetaSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< List >::type gds(gdsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type doCoxReid(doCoxReidSEXP);
    Rcpp::traits::input_parameter< const bool& >::type shareTheta(shareThetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(glmFitFeatures_export(y, X_design, gds, family, weights, offset, detail, doCoxReid, shareTheta, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// glmFitResponses_export
List glmFitResponses_export(const RObject& mat, const arma::mat& X_design, const vector<string>& ids, const std::string& family, const arma::vec& weights, const arma::vec& offset, const int& chunkSize, const int detail, const bool& doCoxReid, const int& nthreads);
RcppExport SEXP _GenomicDataStream_glmFitResponses_export(SEXP matSEXP, SEXP X_designSEXP, SEXP idsSEXP, SEXP familySEXP, SEXP weightsSEXP, SEXP offsetSEXP, SEXP chunkSizeSEXP, SEXP detailSEXP, SEXP doCoxReidSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_design(X_designSEXP);
    Rcpp::traits::input_parameter< const vector<string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type detail(detailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type doCoxReid(doCoxReidSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(glmFitResponses_export(mat, X_design, ids, family, weights, offset, chunkSize, detail, doCoxReid, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GenomicDataStream_create_xptr", (DL_FUNC) &_GenomicDataStream_create_xptr, 6},
    {"_GenomicDataStream_getInfo", (DL_FUNC) &_GenomicDataStream_getInfo, 1},
    {"_GenomicDataStream_atEndOfStream_rcpp", (DL_FUNC) &_GenomicDataStream_atEndOfStream_rcpp, 1},
    {"_GenomicDataStream_featuresRead_rcpp", (DL_FUNC) &_GenomicDataStream_featuresRead_rcpp, 1},
    {"_GenomicDataStream_getNextChunk_rcpp", (DL_FUNC) &_GenomicDataStream_getNextChunk_rcpp, 1},
    {"_GenomicDataStream_colSums_test", (DL_FUNC) &_GenomicDataStream_colSums_test, 1},
    {"_GenomicDataStream_standardize_test", (DL_FUNC) &_GenomicDataStream_standardize_test, 3},
    {"_GenomicDataStream_test_DataTable", (DL_FUNC) &_GenomicDataStream_test_DataTable, 3},
    {"_GenomicDataStream_test_lm", (DL_FUNC) &_GenomicDataStream_test_lm, 2},
    {"_GenomicDataStream_lmFitFeatures_export", (DL_FUNC) &_GenomicDataStream_lmFitFeatures_export, 7},
    {"_GenomicDataStream_lmFitResponses_export", (DL_FUNC) &_GenomicDataStream_lmFitResponses_export, 8},
    {"_GenomicDataStream_glmFitFeatures_export", (DL_FUNC) &_GenomicDataStream_glmFitFeatures_export, 10},
    {"_GenomicDataStream_glmFitResponses_export", (DL_FUNC) &_GenomicDataStream_glmFitResponses_export, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_GenomicDataStream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
